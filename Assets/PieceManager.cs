using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
/*
 * 常见棋形：连五、活四、冲四、活三、眠三、活二、眠二---------0代表当前没有被下的点   1为已经下了的黑棋   2为已经下了的白棋   拿黑棋来举例
 * 活四：有两个点可以形成连五    011110
 * 冲四：有一个点可以形成连五   011112  10111  11011
 * 活三：可以形成活四就叫做活三    01110   1011--这种中间跳着一格的活三也可以叫做跳活三
 * 眠三：只能形成冲四的三 001112   010112  011012   10011  10101   2011102
 * 活二：能够形成活三的二，001100   01010   1001--这些都能成为活三
 * 眠二：能够形成眠三的二，000112   001012  010012  10001
 * 
 * 
 * 连五 > 活四 > 死四 > 活三 > 活二 （略大于）死三 > 死二 > 其他棋型 
 * 
 *  1、打分思路
    （1）先对整个棋盘形势进行打分，存在两个矩阵（二维数组）上

    （2）一个为我方的形势分数，一个为敌方的形势分数

    （3）找出我方形势分数的最大值mymaxscore及其对应的位置，找出敌方形势的最大值hismaxscore及其对应的位置

    （4）判断是进攻还是防守：

    如果mymaxscore>=hismaxscore，则进攻，下我方形势最大值mymaxscore对应的位置；如果有多个mymaxscore相等，则下这几个对应位置上hismaxscore最大的位置。

    否则，防守，下敌方形势最大值hismaxscore对应的位置。如果有多个hismaxscore相等，则下这几个对应位置上mymaxscore最大的位置。

2、打分方法
    （1）在棋盘空位置上预添加要判断放的棋子

    （2）取出以空位置为中心的4个方向（上，下，左，右），每个方向以该位置为中心两边各取4个格子信息。如下所示：

    注：中心位置都是预放置，当前判断的时候位置还是空的

    （3）四个方向都判断其棋型，是否连五，活四，冲四，活三，眠三，活二，眠二等中的一种

    （4）最后综合四个方向的棋型，对该位置进行打分。

3、打分规定
    注：机器方即为本方，人方即为敌方

    综合四个方向后：

    判断是否能成5, 如果是机器方的话给予100000分，如果是人方的话给予100000 分；

    判断是否能成活4或者是双死4或者是死4活3，如果是机器方的话给予10000分，如果是人方的话给予10000分；

    判断是否已成双活3，如果是机器方的话给予5000分，如果是人方的话给予5000 分；

    判断是否成死3活3（高级），如果是机器方的话给予1000分，如果是人方的话给予1000 分；

    判断是否能成死4，如果是机器方的话给予500分，如果是人方的话给予500分；

    判断是否能成低级死4，如果是机器方的话给予400分，如果是人方的话给予400分；
    
    判断是否能成单活3，如果是机器方的话给予100分，如果是人方的话给予100分；

    判断是否能成跳活3，如果是机器方的话给予90分，如果是人方的话给予90分；

    判断是否能成双活2，如果是机器方的话给予50分，如果是人方的话给予50分；

    判断是否能成活2，如果是机器方的话给予10分，如果是人方的话给予10分；

    判断是否能成低级活2，如果是机器方的话给予9分，如果是人方的话给予9分；

    判断是否能成死3，如果是机器方的话给予5分，如果是人方的话给予5分；

    判断是否能成死2，如果是机器方的话给予2分，如果是人方的话给予2分。

    判断是否其他情况（nothing），如果是机器方的话给予1分，如果是人方的话给予1分。

    有棋子，则直接0分。
 * 
 * 
 * 
 * 
 * **/

public struct Point
{
    public int Vol;
    public int Col;
    public Point(int vol, int col)
    {
        Vol = vol;
        Col = col;
    }
}

public class PieceManager
{
    public Point CalcAI()
    {
        int vol = -1, col = -1;
        int maxAttackScore = 0;
        int maxDefendScore = 0;
        PieceItem[,] pieceItems = GameManager.pieceItemArray;
        for (int i = 0; i < GameManager.Instance.totalVolCount; i++)
        {
            for (int j = 0; j < GameManager.Instance.totalColCount; j++)
            {

            }
        }



        return new Point(vol, col);
    }
}
